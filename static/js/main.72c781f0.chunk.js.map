{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/add-list/index.js","components/add-list/add-list.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","target","value","setState","props","type","placeholder","this","onChange","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","classNames","important","onClick","TodoList","todos","elements","map","item","id","itemProps","key","ItemStatusFilter","AddList","onLabelChange","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","el","before","slice","after","addItem","text","newItem","toggleProperty","arr","propName","oldItem","items","length","filter","toLowerCase","indexOf","visibleItems","search","doneCount","unDoneCount","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.72c781f0.chunk.js","sourcesContent":["import AppHeader from './app-header';\n\nexport default AppHeader;","import React from 'react';\nimport './app-header.css';\n\nconst AppHeader = ({toDo, done}) => {\n  return (\n    <div className=\"app-header d-flex\">\n      <h1>Todo List</h1>\n      <h2>{toDo} more to do, {done} done</h2>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import SearchPanel from './search-panel';\n\nexport default SearchPanel;","import React, {Component} from 'react';\nimport './search-panel.css';\n\n\nexport default class SearchPanel extends Component {\n  state = {\n    term: ''\n  };\n\n  onSearchChange = (e) => {\n    const term = e.target.value;\n    this.setState({ term });\n    this.props.onSearchChange(term);\n  };\n\n  render() {\n    return(\n      <input type=\"text\"\n             className=\"form-control search-input\"\n             placeholder=\"type to search\" \n             value={ this.state.term } \n             onChange={this.onSearchChange} />\n    );\n  };\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const SearchPanel = () => {\n//   return (\n//     <input type=\"text\"\n//               className=\"form-control search-input\"\n//               placeholder=\"type to search\" />\n//   );\n// };\n\n// export default SearchPanel;\n\n\n","import React, { Component } from 'react';\nimport './todo-list-item.css';\n\n\nexport default class TodoListItem extends Component {\n\n  // state = {                    // here we save some information\n  //   done: false,\n  //   important: false\n  // };\n\n  // onLabelClick = () => {\n  //   this.setState(({done}) => {     // when we initial state, later we can't just chane his, so we use method 'setState' for change state\n  //     return {\n  //       done: !done\n  //     };  \n  //   });\n  // };\n\n  // onMarkImportant = () => {\n  //   this.setState (({important}) => {\n  //     return {\n  //       important: !important\n  //     };\n  //   });\n  // };\n\n  render() {\n   const { label, onDeleted, \n           onToggleImportant, onToggleDone, \n           done, important } = this.props;\n\n   let classNames = \"todo-list-item\";\n   \n   if (done) {\n     classNames += ' done';\n   }\n\n   if (important) {\n     classNames += ' important';\n   }\n\n\n    return (\n      <span className={classNames}>\n        <span\n          className=\"todo-list-item-label\"\n          onClick={ onToggleDone } >\n          {label}\n        </span>\n  \n        <button type=\"button\"\n          className=\"btn btn-outline-success btn-sm float-right\"\n          onClick={ onToggleImportant }>\n          <i className=\"fa fa-exclamation\" />\n        </button>\n  \n        <button type=\"button\"\n          className=\"btn btn-outline-danger btn-sm float-right\"\n          onClick={onDeleted}>\n          <i className=\"fa fa-trash-o\" />\n        </button>\n      </span>\n    );\n  };\n};\n\n\n\n","import TodoList from './todo-list';\n\nexport default TodoList;","import React from 'react';\n\nimport TodoListItem from '../todo-list-item/todo-list-item';\nimport './todo-list.css';\n\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => {\n\n  const elements = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <li key={id} className=\"list-group-item\">\n        <TodoListItem \n          {...itemProps } \n          onDeleted={() => onDeleted(id)} \n          onToggleImportant={() => onToggleImportant(id)}\n          onToggleDone={() => onToggleDone(id)}\n        />\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"list-group todo-list\">\n      { elements }\n    </ul>\n  );\n\n};\n\nexport default TodoList;\n","import ItemStatusFilter from './item-status-filter';\n\nexport default ItemStatusFilter;","import React, { Component } from 'react';\nimport './item-status-filter.css';\n\n\nexport default class ItemStatusFilter extends Component {\n\n  render() {\n    return (\n      <div className=\"btn-group\">\n        <button type=\"button\"\n                className=\"btn btn-info\">All</button>\n        <button type=\"button\"\n                className=\"btn btn-outline-secondary\">Active</button>\n        <button type=\"button\"\n                className=\"btn btn-outline-secondary\">Done</button>\n      </div>\n    );\n  };\n};\n\n\n","import AddList from './add-list';\n\nexport default AddList;\n","import React, {Component} from 'react';\nimport './add-list.css';\n\n\nexport default class AddList extends Component {\n\n  state = {\n    label: ''\n  };\n\n  onLabelChange = (e) => {\n    this.setState({\n      label: e.target.value\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault(); // т.к. формы для заполнения данных по умолчанию после отправки перезагружают страницу, нам это не нужно и с помощью метода preventDefault мы отменяем это ее стандартное действие\n    this.props.onItemAdded(this.state.label);\n    this.setState({\n      label: ''\n    });\n  };\n\n    render() {\n      return (\n        <form className='add-list-form d-flex'\n              onSubmit={this.onSubmit}>\n          <input type=\"text\" \n                 className='form-control'\n                 onChange={ this.onLabelChange }\n                 placeholder='What needs to be done' \n                 value={this.state.label} />\n          <button \n            className=\"add-list-form-btn btn btn-info\"\n            // onClick={ () => this.props.onItemAdded('Hello world!') }\n            >\n            Add Item\n          </button>\n        </form>\n      );\n    };\n};\n\n\n","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\n\nimport './app.css';\n\nimport AppHeader from '../app-header'\nimport SearchPanel from '../search-panel'\nimport TodoList from '../todo-list'\nimport ItemStatusFilter from '../item-status-filter'\nimport AddList from '../add-list'\n\nexport default class App extends Component {\n\n    maxId = 100;\n\n    state = {\n        todoData: [\n            this.createTodoItem('Drink coffee'),\n            this.createTodoItem('Make Awesome App'),\n            this.createTodoItem('Have a lunch')\n        ],\n        term: ''\n    };\n\n    createTodoItem(label) {\n        return {\n            label,\n            important: false,\n            done: false,\n            id: this.maxId++\n        }\n    }\n\n    deleteItem = (id) => {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex( (el) => el.id === id );\n\n            const before = todoData.slice(0, idx);\n            const after = todoData.slice(idx + 1); //когда не передаем 2й индекс значит от начала и до конца\n\n            const newArray = [...before, ...after];\n\n            return {\n                todoData: newArray\n            };\n        });\n    };\n\n    addItem = (text) => {\n        const newItem = this.createTodoItem(text);\n        this.setState( ({ todoData }) => {\n            const newArray = [...todoData, newItem]\n            return {\n                todoData: newArray\n            };\n        });\n    };\n\n    toggleProperty(arr, id, propName) {\n        const idx = arr.findIndex( (el) => el.id === id );\n            \n        // 1. update object\n        const oldItem = arr[idx];\n        const newItem = {...oldItem, [propName]: !oldItem[propName]};  // - создаем новый объект на основе старого используя spred Оператор, все свойства нового объекта будут такими же как и у старого второе свойство \"done\" перезапишет первое свойство \"...oldItem\". done: !oldItem.done - для того что бы получилось противоположне значение теперь у нас есть новый элемент newItem точно такой же как и oldItem кроме значения done которое стало противоположным. старый объект мы не изменяли мы просто скопировали с него ключи и значения\n\n        // 2. constract new array\n        return [\n            ...arr.slice(0, idx), // берем все элементы до заданного элемента(idx)\n            newItem, // вставляем новый элемент у которого св-во done изменено на противоположное значение\n            ...arr.slice(idx + 1) // берем все элементы после заданного значения. в итоге у нас массив newArray со старыми значениями и в середине наше новое значение\n        ];\n    }\n\n    onToggleDone = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty(todoData, id, 'done') // здесь мы возврашаем новый state\n            };\n        });                                                         \n    };                                                                 \n\n    onToggleImportant = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty(todoData, id, 'important') // здесь мы возврашаем новый state\n            };\n        });\n    };\n\n    onSearchChange = (term) => {\n        this.setState({ term })\n    };\n\n    search (items, term) {\n        if (term.length === 0) {\n            return items;\n        };\n\n        return items.filter((item) => {\n            return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1\n        });\n    };\n\n\n    render() {\n        const { todoData, term } = this.state; // this.state повторяется что бы не писать его в коде много раз, присваваем его в переменную или динамич переменную (уточнить)\n        const visibleItems = this.search(todoData, term);\n        const doneCount = todoData.filter((el) => el.done).length; // отфильтровали массив и state , создали новый массив, в новом массиве мы сохранили только те значения у которых есть done которое true и затем мы посчитали длину этого массива\n        const unDoneCount = todoData.filter((el) => el).length - doneCount;\n\n        return (\n            <div className='main'>\n                <AppHeader toDo={ unDoneCount } done={ doneCount } />\n                <SearchPanel onSearchChange = {this.onSearchChange} />\n                <ItemStatusFilter />\n                <TodoList \n                    todos={ visibleItems }\n                    onDeleted={ this.deleteItem } \n                    onToggleImportant = {this.onToggleImportant}\n                    onToggleDone = {this.onToggleDone}\n                />\n                <AddList onItemAdded = {this.addItem} />    \n            </div>\n        );\n    } \n};\n\n","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './components/app';\n\n\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}